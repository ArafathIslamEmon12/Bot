import os
import logging
import random
import asyncio
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# Initialize environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USERS = set(map(int, os.getenv("ALLOWED_USERS", "").split(","))) if os.getenv("ALLOWED_USERS") else set()
OWNER_ID = int(os.getenv("OWNER_ID", 0))  # Add owner ID from environment

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Global storage for predictions and language preferences
user_predictions = {}
user_language = {}  # Stores language preference: key=user_id, value='en' or 'bn'
prediction_lock = asyncio.Lock()

# Initialize bot and dispatcher
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# Create reply keyboard
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="тЬи Generate Prediction"), 
         KeyboardButton(text="ЁЯТО Get Subscription")],
        [KeyboardButton(text="тЭУ Help"), 
         KeyboardButton(text="ЁЯТ╕ Plans ЁЯТ╕")]
    ],
    resize_keyboard=True
)

# Helper function to calculate next draw time in UTC+6 (with 7-second advance)
def get_next_draw_seconds():
    # Get current UTC time and convert to UTC+6
    utc_now = datetime.utcnow()
    utc6_time = utc_now + timedelta(hours=6)
    
    # Extract seconds from current time
    current_second = utc6_time.second
    
    # Calculate seconds until next draw (every 30 seconds)
    base_seconds = 30 - (current_second % 30)
    
    # Show 7 seconds earlier than actual draw time
    adjusted_seconds = base_seconds - 4
    
    # Handle case when adjusted seconds would be negative
    if adjusted_seconds < 0:
        # Add 30 seconds to wrap to next period
        adjusted_seconds += 30
    
    return adjusted_seconds

# Calculate the next period timestamp (with 7-second advance)
def get_next_period_timestamp():
    utc_now = datetime.utcnow()
    utc6_time = utc_now + timedelta(hours=6)
    
    # Calculate next draw time (30-second intervals)
    current_second = utc6_time.second
    seconds_to_add = 30 - (current_second % 30)
    
    # Adjust to show 7 seconds earlier
    seconds_to_add -= 7
    if seconds_to_add < 0:
        seconds_to_add += 30
    
    next_draw_time = utc6_time + timedelta(seconds=seconds_to_add)
    return next_draw_time.strftime("%Y%m%d%H%M%S")

# =====================
# LANGUAGE MANAGEMENT
# =====================

def get_user_language(user_id):
    """Get user's language preference with English as default"""
    return user_language.get(user_id, 'en')

def create_translate_button(command):
    """Create inline button for translating current command"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ржмрж╛ржВрж▓рж╛ржпрж╝ ржЕржирзБржмрж╛ржж ржХрж░рзБржи", callback_data=f"setlang_bn_{command}")]
    ])

# Callback handler for language selection
@dp.callback_query(F.data.startswith("setlang_bn_"))
async def set_bangla_language(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    command = callback.data.split('_')[2]  # Extract command name
    user_language[user_id] = 'bn'  # Set to Bangla
    
    # Edit original message to remove translate button
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # Resend the command in Bangla
    if command == "start":
        await start_command(callback.message, force_bangla=True)
    elif command == "help":
        await help_command(callback.message, force_bangla=True)
    elif command == "generate":
        await generate_command(callback.message, force_bangla=True)
    
    await callback.answer()

# =====================
# COMMAND HANDLERS (BANGLA/ENGLISH)
# =====================

@dp.message(Command("start"))
async def start_command(message: types.Message, force_bangla=False):
    user_id = message.from_user.id
    lang = get_user_language(user_id) if not force_bangla else 'bn'
    
    if lang == 'bn':
        # Bangla version
        uid_display = f"ЁЯФС <b>ржЖржкржирж╛рж░ UID:</b> <code>{user_id}</code>\n\n"
        
        if user_id not in ALLOWED_USERS:
            await message.answer(
                uid_display +
                "ЁЯМЯ <b>WinGo 30s ржкрзНрж░рзЗржбрж┐ржХрж╢ржи ржмржЯрзЗ рж╕рзНржмрж╛ржЧрждржо!</b> ЁЯМЯ\n\n"
                "ржЖржорж┐ WinGo 30s ржЧрзЗржорзЗрж░ ржЬржирзНржп AI-ржЪрж╛рж▓рж┐ржд ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржкрзНрж░ржжрж╛ржи ржХрж░рж┐ред "
                "ржмрж░рзНрждржорж╛ржирзЗ, ржЖржкржирж┐ рж╕рзАржорж┐ржд ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж╣ <b>ржлрзНрж░рж┐ рж╕ржВрж╕рзНржХрж░ржг</b> ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЗржиред\n\n"
                "ЁЯФУ <b>ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:</b>\n"
                "тЬЕ рзлрзжрзжржЯрж┐ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ ржкрж░ржмрж░рзНрждрзА рж░рж╛ржЙржирзНржбрзЗрж░ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА\n"
                "ЁЯСЙ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржирзЗрж░ ржорж╛ржзрзНржпржорзЗ <b>рж╕ржорзНржкрзВрж░рзНржг ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрж╛ржи</b>!",
                reply_markup=keyboard
            )
            return

        await message.answer(
            "ЁЯОЙ <b>WinGo 30s ржкрзНрж░рзЗржбрж┐ржХрж╢ржи ржмржЯрзЗ рж╕рзНржмрж╛ржЧрждржо!</b> ЁЯОЙ\n\n"
            "ржЖржорж┐ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд AI рж╕рж╣ржХрж╛рж░рзА, WinGo 30s ржЧрзЗржорзЗрж░ ржлрж▓рж╛ржлрж▓ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзАрж░ ржЬржирзНржп "
            "<b>ржЙржирзНржиржд ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо</b> ржПржмржВ <b>рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг</b> рж╕рж╣!\n\n"
            "ЁЯТО <b>ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржХрзНрж░рж┐ржпрж╝!</b>\n"
            "ржЖржкржирж╛рж░ рж╕ржорж╕рзНржд ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрзЗ рж╕ржорзНржкрзВрж░рзНржг ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж░ржпрж╝рзЗржЫрзЗ:\n"
            "тЬЕ ржЙржирзНржиржд ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА рждрзИрж░рж┐ ржХрж░рзБржи\n\n"
            "<b>ржЙржкрж▓ржмрзНржз ржХржорж╛ржирзНржб:</b>\n"
            "тЬи /generate - ржкрж░ржмрж░рзНрждрзА ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржкрж╛ржи\n"
            "ЁЯТО /buy - ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржХрж┐ржирзБржи ржПржмржВ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржкрж╛ржи\n"
            "тЭУ /help - ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржирж┐рж░рзНржжрзЗрж╢рж╛ржмрж▓рзА\n\n"
            "рж╢рзБрж░рзБ ржХрж░рждрзЗ <b>тЬи Generate Prediction</b> ржЯрзНржпрж╛ржк ржХрж░рзБржи!",
            reply_markup=keyboard
        )
    else:
        # English version with translate button
        uid_display = f"ЁЯФС <b>Your UID:</b> <code>{user_id}</code>\n\n"
        
        if user_id not in ALLOWED_USERS:
            await message.answer(
                uid_display +
                "ЁЯМЯ <b>Welcome to WinGo 30s Prediction Bot!</b> ЁЯМЯ\n\n"
                "I provide AI-powered predictions for WinGo 30s game. "
                "Currently, you're using the <b>free version</b> with limited access.\n\n"
                "ЁЯФУ <b>Premium Features:</b>\n"
                "тЬЕ Next round predictions by Analysing 500 historical data\n"
                "ЁЯСЙ <b>Get full access</b> with our premium subscription!",
                reply_markup=create_translate_button("start")
            )
            return

        await message.answer(
            "ЁЯОЙ <b>Welcome to WinGo 30s Prediction Bot!</b> ЁЯОЙ\n\n"
            "I'm your personal AI assistant for predicting WinGo 30s game results with "
            "<b>advanced algorithms</b> and <b>real-time data analysis</b>!\n\n"
            "ЁЯТО <b>Premium Account Activated!</b>\n"
            "You have full access to all features:\n"
            "тЬЕ Generate Advance predictions\n\n"
            "<b>Available Commands:</b>\n"
            "тЬи /generate - Get next prediction\n"
            "ЁЯТО /buy - Buy your subscription and get access\n"
            "тЭУ /help - Detailed instructions\n\n"
            "Tap <b>тЬи Generate Prediction</b> to get started!",
            reply_markup=create_translate_button("start")
        )

@dp.message(Command("help"))
async def help_command(message: types.Message, force_bangla=False):
    user_id = message.from_user.id
    lang = get_user_language(user_id) if not force_bangla else 'bn'
    
    if lang == 'bn':
        # Bangla version
        await message.answer(
            "ЁЯУЪ <b>WinGo ржкрзНрж░рзЗржбрж┐ржХрж╢ржи ржмржЯ ржЧрж╛ржЗржб</b>\n\n"
            "ржЖржорж┐ ржЙржирзНржиржд ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ WinGo 30s ржЧрзЗржорзЗрж░ ржлрж▓рж╛ржлрж▓ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж┐ред\n\n"
            "тЬи <b>/generate</b>\n"
            "ржкрж░ржмрж░рзНрждрзА ржЧрзЗржо рж░рж╛ржЙржирзНржбрзЗрж░ ржЬржирзНржп ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржкрж╛ржиред ржкрзНрж░рждрж┐ржЯрж┐ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзЗ:\n"
            "- ЁЯОп рж╕рж╛ржЗржЬ (ржмржбрж╝/ржЫрзЛржЯ)\n"
            "- ЁЯОи рж░ржЩ (рж▓рж╛рж▓/рж╕ржмрзБржЬ/ржмрзЗржЧрзБржирж┐)\n\n"
            "ЁЯТО <b>/buy</b>\n"
            "ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржмрзИрж╢рж┐рж╖рзНржЯрзНржп ржЖржирж▓ржХ ржХрж░рзБржиред ржирж┐рж░рзНржжрзЗрж╢рж╛ржмрж▓рзА ржЕржирзБрж╕рж░ржг ржХрж░рзБржи "
            "ржЖржкржирж╛рж░ рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзЗрждрзЗред\n\n"
            "тЭУ <b>/help</b>\n"
            "ржПржЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржмрж╛рж░рзНрждрж╛ржЯрж┐ ржжрзЗржЦрж╛ржи\n\n"
            "ЁЯФБ <b>ржХрж┐ржнрж╛ржмрзЗ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА ржХрж╛ржЬ ржХрж░рзЗ:</b>\n"
            "1. ржЖржорж┐ AI ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржРрждрж┐рж╣рж╛рж╕рж┐ржХ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж┐\n"
            "2. ржкрж░ржмрж░рзНрждрзА рж░рж╛ржЙржирзНржбрзЗрж░ ржЬржирзНржп ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА рждрзИрж░рж┐ ржХрж░рж┐\n"
            "рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржи? @Emon001100-ржП ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи",
            reply_markup=keyboard
        )
    else:
        # English version with translate button
        await message.answer(
            "ЁЯУЪ <b>WinGo Prediction Bot Guide</b>\n\n"
            "I help you predict WinGo 30s game results using advanced algorithms. "
            "Here's how to use me:\n\n"
            "тЬи <b>/generate</b>\n"
            "Get the prediction for the next game round. Each prediction includes:\n"
            "- ЁЯОп Size (Big/Small)\n"
            "- ЁЯОи Color (Red/Green/Violet)\n\n"
            "ЁЯТО <b>/buy</b>\n"
            "Unlock premium features to generate predictions. Follow the instructions "
            "to get your subscription.\n\n"
            "тЭУ <b>/help</b>\n"
            "Show this help message\n\n"
            "ЁЯФБ <b>How predictions work:</b>\n"
            "1. I analyze historical patterns using AI\n"
            "2. Generate prediction for the NEXT round\n"
            "Need help? Contact @Emon001100",
            reply_markup=create_translate_button("help")
        )

@dp.message(Command("buy"))
async def buy_command(message: types.Message, force_bangla=False):
    user_id = message.from_user.id
    lang = get_user_language(user_id) if not force_bangla else 'bn'
    
    if lang == 'bn':
        # Bangla version
        await message.answer(
            f"ЁЯТО <b>ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи - рж╕ржорзНржкрзВрж░рзНржг ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржЖржирж▓ржХ ржХрж░рзБржи</b>\n\n"
            f"ЁЯФС <b>ржЖржкржирж╛рж░ UID:</b> <code>{user_id}</code>\n\n"
            "ЁЯУЭ <b>ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░ржмрзЗржи:</b>\n"
            "1. ржорж╛рж▓рж┐ржХ @Emon001100-ржХрзЗ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи\n"
            "2. ржЙржкрж░рзЗ ржжрзЗржЦрж╛ржирзЛ ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржЗржбрж┐ ржкрж╛ржарж╛ржи\n"
            "3. ржмрж┐ржХрж╛рж╢ ржмрж╛ ржиржЧржж ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржи\n\n"
            "   ржмрж┐ржХрж╛рж╢+ржиржЧржж: 01756519749\n\n"
            "4. ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкрзВрж░рзНржг ржХрж░рзБржи\n\n"
            "ЁЯФД <b>ржкрзЗржорзЗржирзНржЯрзЗрж░ ржкрж░:</b>\n"
            "тАв ржкрзЗржорзЗржирзНржЯ ржкрзНрж░ржорж╛ржг ржорж╛рж▓рж┐ржХ @Emon001100-ржХрзЗ ржкрж╛ржарж╛ржи\n"
            "тАв рзл ржорж┐ржирж┐ржЯрзЗрж░ ржоржзрзНржпрзЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рж╛ рж╣ржмрзЗ\n"
            "тАв ржЖржкржирж┐ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг ржмрж╛рж░рзНрждрж╛ ржкрж╛ржмрзЗржи\n\n"
            "ЁЯМЯ <b>ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рзБржмрж┐ржзрж╛:</b>\n"
            "тАв рж╕рзАржорж╛рж╣рзАржи ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА\n"
            "тАв ржкрзНрж░рж╛ржержорж┐ржХ рж╕ржорж░рзНржержи\n"
            "тАв ржмрж┐рж╢рзЗрж╖ ржмрзЛржирж╛рж╕ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп\n\n"
            "рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржи? рж╕рж░рж╛рж╕рж░рж┐ ржорж╛рж▓рж┐ржХ @Emon001100-ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи!",
            reply_markup=keyboard
        )
    else:
        # English version
        await message.answer(
            f"ЁЯТО <b>Premium Subscription - Unlock Full Access</b>\n\n"
            f"ЁЯФС <b>Your UID:</b> <code>{user_id}</code>\n\n"
            "ЁЯУЭ <b>How to subscribe:</b>\n"
            "1. Contact the OWNER @Emon001100 on Telegram\n"
            "2. Send your telegram ID shown above\n"
            "3. Send money on Bkash or Nagad account\n\n"
            "   Bkash+Nagat: 01756519749\n\n"
            "4. Complete payment\n\n"
            "ЁЯФД <b>After payment:</b>\n"
            "тАв Send payment proof to OWNER @Emon001100\n"
            "тАв Your account will be activated within 5 minutes\n"
            "тАв You'll receive confirmation message\n\n"
            "ЁЯМЯ <b>Premium Benefits:</b>\n"
            "тАв Unlimited predictions\n"
            "тАв Priority support\n"
            "тАв Special bonus features\n\n"
            "Need help? Contact with OWNER @Emon001100 directly!",
            reply_markup=create_translate_button("buy")
        )

@dp.message(Command("removeuser"))
async def remove_user_command(message: types.Message):
    """Remove a user from the allowed list (Owner only)"""
    if message.from_user.id != OWNER_ID:
        logger.warning(f"Unauthorized removeuser attempt by {message.from_user.id}")
        return
        
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("тЭМ <b>Usage:</b>\n<code>/removeuser USER_ID</code>")
            return
            
        user_id = int(args[1])
        
        if user_id in ALLOWED_USERS:
            ALLOWED_USERS.remove(user_id)
            
            # Update .env file
            with open('.env', 'w') as f:
                f.write(f"BOT_TOKEN={BOT_TOKEN}\n")
                f.write(f"OWNER_ID={OWNER_ID}\n")
                if ALLOWED_USERS:  # Only write if not empty
                    f.write(f"ALLOWED_USERS={','.join(map(str, ALLOWED_USERS))}")
                
            await message.answer(f"тЬЕ <b>User removed!</b>\nUser ID: <code>{user_id}</code> can no longer generate predictions.")
            logger.info(f"Removed user: {user_id}")
            
            # Optional: Notify the removed user
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="тЪая╕П <b>Subscription Ended</b>\n\n"
                         "Your access to premium predictions has been removed.\n"
                         "Contact @Emon001100 if this was a mistake."
                )
            except Exception as e:
                logger.error(f"Could not notify user {user_id}: {e}")
        else:
            await message.answer(f"тД╣я╕П User <code>{user_id}</code> was not in the allowed list.")
            
    except (ValueError, IndexError):
        await message.answer("тЭМ <b>Invalid format</b>\nUsage: <code>/removeuser USER_ID</code>\nExample: <code>/removeuser 123456789</code>")
    except Exception as e:
        await message.answer(f"тЪая╕П <b>Error:</b> {str(e)}")
        logger.error(f"Removeuser error: {e}")

@dp.message(Command("adduser"))
async def add_user_command(message: types.Message):
    # Only allow owner to use this command
    if message.from_user.id != OWNER_ID:
        logger.warning(f"Unauthorized adduser attempt by {message.from_user.id}")
        return
        
    try:
        # Extract user ID from command
        args = message.text.split()
        if len(args) < 2:
            await message.answer("тЭМ <b>Usage:</b>\n<code>/adduser USER_ID</code>")
            return
            
        user_id = int(args[1])
        
        # Add user to allowed list
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.add(user_id)
            
            # Update .env file
            with open('.env', 'a') as f:
                f.write(f"\nALLOWED_USERS={','.join(map(str, ALLOWED_USERS))}")
                
            await message.answer(f"тЬЕ <b>User added!</b>\nUser ID: <code>{user_id}</code> can now generate predictions.")
            logger.info(f"Added new user: {user_id}")
        else:
            await message.answer(f"тД╣я╕П User <code>{user_id}</code> is already in the allowed list.")
            
    except (ValueError, IndexError):
        await message.answer("тЭМ <b>Invalid format</b>\nUsage: <code>/adduser USER_ID</code>\nExample: <code>/adduser 123456789</code>")
    except Exception as e:
        await message.answer(f"тЪая╕П <b>Error:</b> {str(e)}")
        logger.error(f"Adduser error: {e}")

@dp.message(F.text.casefold() == "ЁЯТО get subscription")
async def buy_button(message: types.Message):
    await buy_command(message)

@dp.message(F.text.casefold() == "тЭУ help")
async def help_button(message: types.Message):
    await help_command(message)

@dp.message(Command("generate"))
@dp.message(F.text.casefold() == "тЬи generate prediction")
async def generate_command(message: types.Message, force_bangla=False):
    user_id = message.from_user.id
    lang = get_user_language(user_id) if not force_bangla else 'bn'
    
    if lang == 'bn':
        uid_display = f"ЁЯФС <b>ржЖржкржирж╛рж░ UID:</b> <code>{user_id}</code>\n\n"
    else:
        uid_display = f"ЁЯФС <b>Your UID:</b> <code>{user_id}</code>\n\n"

    # Subscription check
    if user_id not in ALLOWED_USERS:
        if lang == 'bn':
            await message.answer(
                uid_display +
                "ЁЯФТ <b>ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНрж░ржпрж╝рзЛржЬржи</b>\n\n"
                "ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА рждрзИрж░рж┐ ржХрж░рждрзЗ ржЖржкржирж╛рж░ ржПржХржЯрж┐ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНрж░ржпрж╝рзЛржЬржиред\n\n"
                "ЁЯСЙ <b>ржЖржкржЧрзНрж░рзЗржб ржХрж░рж╛рж░ рж╕рзБржмрж┐ржзрж╛:</b>\n"
                "тАв рж╕рзАржорж╛рж╣рзАржи ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА\n"
                "тАв рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА\n"
                "рж╕ржорзНржкрзВрж░рзНржг ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржЖржирж▓ржХ ржХрж░рждрзЗ <b>ЁЯТО Get Subscription</b> ржЯрзНржпрж╛ржк ржХрж░рзБржи!",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                uid_display +
                "ЁЯФТ <b>Premium Subscription Required</b>\n\n"
                "You need a premium subscription to generate predictions.\n\n"
                "ЁЯСЙ <b>Benefits of upgrading:</b>\n"
                "тАв Unlimited predictions\n"
                "тАв Real-time prediction\n"
                "Tap <b>ЁЯТО Get Subscription</b> to unlock full access!",
                reply_markup=create_translate_button("generate")
            )
        return

    # Show loading animation with proper language
    if lang == 'bn':
        loading_text = "ЁЯФо <i>ржЧрзЗржо ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...</i>"
        calculating_text = "ЁЯза <i>рж╕ржорзНржнрж╛ржмржирж╛ ржЧржгржирж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...</i>"
    else:
        loading_text = "ЁЯФо <i>Analyzing game patterns...</i>"
        calculating_text = "ЁЯза <i>Calculating probabilities...</i>"
    
    loading_msg = await message.answer(loading_text)
    await asyncio.sleep(1)
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=loading_msg.message_id,
        text=calculating_text
    )
    await asyncio.sleep(1)
    await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)

    # Get next period and seconds left
    next_period = get_next_period_timestamp()
    seconds_left = get_next_draw_seconds()
    is_fresh = False

    async with prediction_lock:
        # Get existing or create new prediction
        if (user_id, next_period) in user_predictions:
            size, color = user_predictions[(user_id, next_period)]
        else:
            size = random.choice(["Big", "Small"])
            color = random.choice(["Red", "Green", "Violet"])
            user_predictions[(user_id, next_period)] = (size, color)
            is_fresh = True
            # Cleanup old predictions
            current_time = datetime.utcnow() + timedelta(hours=6)
            current_timestamp = current_time.strftime("%Y%m%d%H%M%S")
            for key in list(user_predictions.keys()):
                if key[1] < current_timestamp:
                    del user_predictions[key]

    # Format response
    color_emoji = "ЁЯФ┤" if color == "Red" else "ЁЯЯв" if color == "Green" else "ЁЯЯг"
    
    if lang == 'bn':
        # Bangla prediction
        await message.answer(
            f"ЁЯОп <b>WinGo 30s ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА</b>\n\n"
            f"ЁЯФо <b>ржкрж░ржмрж░рзНрждрзА рж╕ржоржпрж╝рзЗрж░ ржЬржирзНржп ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзА</b>\n\n"
            f"ЁЯУП <b>рж╕рж╛ржЗржЬ:</b> {'ржмржбрж╝' if size == 'Big' else 'ржЫрзЛржЯ'}\n\n"
            f"ЁЯОи <b>рж░ржЩ:</b> {color_emoji} {'рж▓рж╛рж▓' if color == 'Red' else 'рж╕ржмрзБржЬ' if color == 'Green' else 'ржмрзЗржЧрзБржирж┐'}\n\n"
            f"тП│ <b>ржкрж░ржмрж░рзНрждрзА ржбрзНрж░: {seconds_left} рж╕рзЗржХрзЗржирзНржбрзЗ</b>\n",
            reply_markup=keyboard
        )
    else:
        # English prediction with translate button
        await message.answer(
            f"ЁЯОп <b>WinGo 30s Prediction</b>\n\n"
            f"ЁЯФо <b>Prediction for next Period</b>\n\n"
            f"ЁЯУП <b>Size:</b> {size}\n\n"
            f"ЁЯОи <b>Color:</b> {color_emoji} {color}\n\n"
            f"тП│ <b>Next draw in: {seconds_left} seconds</b>\n",
            reply_markup=create_translate_button("generate")
        )

# =====================
# PLANS COMMANDS SECTION
# =====================

# Main Plans Keyboard
plans_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ЁЯТ╕рзлрзжрзжTK PlanЁЯТ╕"), 
         KeyboardButton(text="ЁЯТ╕рззрзжрзжрзжTK PlanЁЯТ╕")],
        [KeyboardButton(text="ЁЯТ╕рзирзжрзжрзжTK PlanЁЯТ╕"),
         KeyboardButton(text="ЁЯФЩ Main Menu")]
    ],
    resize_keyboard=True
)

# 500TK Plan Options
plan_500_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ЁЯдС рзлрзжрзж TK рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС"),
         KeyboardButton(text="ЁЯдС рзлрзжрзж TK рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")],
        [KeyboardButton(text="ЁЯФЩ Plans Menu")]
    ],
    resize_keyboard=True
)

# 1000TK Plan Options
plan_1000_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ЁЯдС рззрзжрзжрзж TK рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС"),
         KeyboardButton(text="ЁЯдС рззрзжрзжрзж TK рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")],
        [KeyboardButton(text="ЁЯФЩ Plans Menu")]
    ],
    resize_keyboard=True
)

# 2000TK Plan Options
plan_2000_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ЁЯдС рзирзжрзжрзж TK рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС"),
         KeyboardButton(text="ЁЯдС рзирзжрзжрзж TK рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")],
        [KeyboardButton(text="ЁЯФЩ Plans Menu")]
    ],
    resize_keyboard=True
)

# Main Plans Menu Handler
@dp.message(F.text.casefold() == "ЁЯТ╕ plans ЁЯТ╕")
async def plans_menu(message: types.Message):
    await message.answer(
        "ЁЯТ░ <b>ржмрзЗржЯрж┐ржВ ржкрзНрж▓рзНржпрж╛ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи</b> ЁЯТ░\n\n"
        "ржирж┐ржЪ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржкрзНрж▓рзНржпрж╛ржиржЯрж┐ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
        reply_markup=plans_keyboard
    )

# Back to Main Menu
@dp.message(F.text.casefold() == "ЁЯФЩ main menu")
async def back_to_main(message: types.Message):
    await message.answer(
        "ЁЯПа <b>ржорзЗржЗржи ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржЖрж╕рж╛ рж╣рзЯрзЗржЫрзЗ</b>",
        reply_markup=keyboard
    )

# Back to Plans Menu
@dp.message(F.text.casefold() == "ЁЯФЩ plans menu")
async def back_to_plans(message: types.Message):
    await message.answer(
        "ЁЯФЩ <b>ржкрзНрж▓рзНржпрж╛ржи ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржЖрж╕рж╛ рж╣рзЯрзЗржЫрзЗ</b>",
        reply_markup=plans_keyboard
    )

# =====================
# 500TK PLAN HANDLERS
# =====================

@dp.message(F.text.casefold() == "ЁЯТ╕рзлрзжрзжtk planЁЯТ╕")
async def plan_500_menu(message: types.Message):
    await message.answer(
        "ЁЯТ╡ <b>рзлрзжрзж ржЯрж╛ржХрж╛ ржкрзНрж▓рзНржпрж╛ржи</b> ЁЯТ╡\n\n"
        "ржирж┐ржЪ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
        reply_markup=plan_500_keyboard
    )

@dp.message(F.text.casefold() == "ЁЯдС рзлрзжрзж tk рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")
async def plan_500_option_a(message: types.Message):
    await message.answer(
        "ЁЯдС <b>рзлрзжрзж ржЯрж╛ржХрж╛ рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи</b> ЁЯдС\n\n"
        "ЁЯТ╕ Win rate рзпрзж% \n"
        "тЬЕ рззржо рзйрз│ ржорж╛рж░ржмрзЗржи\n"
        "тЬЕ рзйрз│ рж╣рж╛рж░рж▓рзЗ рзмрз│ \n"
        "тЬЕ рзмрз│ рж╣рж╛рж░рж▓рзЗ рззрзирз│\n"
        "тЬЕ рззрзирз│ рж╣рж╛рж░рж▓рзЗ рзирзкрз│\n"
        "тЬЕ рзирзкрз│ рж╣рж╛рж░рж▓рзЗ рзкрзорз│\n"
        "тЬЕ рзкрзорз│ рж╣рж╛рж░рж▓рзЗ рзпрзмрз│\n"
        "тЬЕ рзпрзмрз│ рж╣рж╛рж░рж▓рзЗ рззрзпрзи \n"
        "ЁЯПЖрззрзпрзмрз│ WinЁЯПЖ  (рзпрзж% chance)\n"
        "тЪая╕Прззрзпрзирз│ рж╣рж╛рж░рж▓рзЗ рззржо рж╕рзНржЯрзЗржк ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗржитЪая╕П",
        reply_markup=plan_500_keyboard
    )

@dp.message(F.text.casefold() == "ЁЯдС рзлрзжрзж tk рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")
async def plan_500_option_b(message: types.Message):
    await message.answer(
        "ЁЯдС <b>рзлрзжрзж ржЯрж╛ржХрж╛ рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи</b> ЁЯдС\n\n"
        "ЁЯТ╕ Win rate рзорзж% ЁЯТ╕\n"
        "тЬЕ рззржо рзлрз│ ржорж╛рж░ржмрзЗржи\n"
        "тЬЕ рзлрз│ рж╣рж╛рж░рж▓рзЗ рззрзжрз│ \n"
        "тЬЕ рззрзжрз│ рж╣рж╛рж░рж▓рзЗ рзирзжрз│\n"
        "тЬЕ рзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзкрзжрз│\n"
        "тЬЕ рзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рзорзжрз│\n"
        "тЬЕ рзорзжрз│ рж╣рж╛рж░рж▓рзЗ рззрзмрзжрз│\n"
        "ЁЯПЖрззрзмрзжрз│ WinЁЯПЖ  (рзорзж% chance)\n"
        "тЪая╕Прззрзмрзжрз│ рж╣рж╛рж░рж▓рзЗ рззржо рж╕рзНржЯрзЗржк ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗржитЪая╕П",
        reply_markup=plan_500_keyboard
    )

# =====================
# 1000TK PLAN HANDLERS
# =====================

@dp.message(F.text.casefold() == "ЁЯТ╕рззрзжрзжрзжtk planЁЯТ╕")
async def plan_1000_menu(message: types.Message):
    await message.answer(
        "ЁЯТ╡ <b>рззрзжрзжрзж ржЯрж╛ржХрж╛ ржкрзНрж▓рзНржпрж╛ржи</b> ЁЯТ╡\n\n"
        "ржирж┐ржЪ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
        reply_markup=plan_1000_keyboard
    )

@dp.message(F.text.casefold() == "ЁЯдС рззрзжрзжрзж tk рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")
async def plan_1000_option_a(message: types.Message):
    await message.answer(
        "ЁЯдС <b>рззрзжрзжрзж ржЯрж╛ржХрж╛ рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи</b> ЁЯдС\n\n"
        "ЁЯТ╕ Win rate рзпрзж% ЁЯТ╕\n"
        "тЬЕ рззржо рзлрз│ ржорж╛рж░ржмрзЗржи\n"
        "тЬЕ рзлрз│ рж╣рж╛рж░рж▓рзЗ рззрзжрз│ \n"
        "тЬЕ рззрзжрз│ рж╣рж╛рж░рж▓рзЗ рзирзжрз│\n"
        "тЬЕ рзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзкрзжрз│\n"
        "тЬЕ рзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рзорзжрз│\n"
        "тЬЕ рзорзжрз│ рж╣рж╛рж░рж▓рзЗ рззрзмрзжрз│\n"
        "тЬЕ рззрзмрзжрз│ рж╣рж╛рж░рж▓рзЗ рзйрзирзжрз│ \n"
        "ЁЯПЖрзйрзирзжрз│ WinЁЯПЖ  (рзпрзж% chance)\n"
        "тЪая╕Прзйрзирзжрз│ рж╣рж╛рж░рж▓рзЗ рззржо рж╕рзНржЯрзЗржк ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗржитЪая╕П",
        reply_markup=plan_1000_keyboard
    )

@dp.message(F.text.casefold() == "ЁЯдС рззрзжрзжрзж tk рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")
async def plan_1000_option_b(message: types.Message):
    await message.answer(
        "ЁЯдС <b>рззрзжрзжрзж ржЯрж╛ржХрж╛ рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи</b> ЁЯдС\n\n"
        "ЁЯТ╕ Win rate рзорзж% ЁЯТ╕\n"
        "тЬЕ рззржо рззрзжрз│ ржорж╛рж░ржмрзЗржи\n"
        "тЬЕ рззрзжрз│ рж╣рж╛рж░рж▓рзЗ рзирзжрз│ \n"
        "тЬЕ рзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзкрзжрз│\n"
        "тЬЕ рзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рзорзжрз│\n"
        "тЬЕ рзорзжрз│ рж╣рж╛рж░рж▓рзЗ рззрзмрзжрз│\n"
        "тЬЕ рззрзмрзжрз│ рж╣рж╛рж░рж▓рзЗ рзйрзирзжрз│\n"
        "ЁЯПЖрзйрзирзжрз│ WinЁЯПЖ (рзорзж% chance)\n"
        "тЪая╕Прзйрзирзжрз│ рж╣рж╛рж░рж▓рзЗ рззржо рж╕рзНржЯрзЗржк ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗржитЪая╕П",
        reply_markup=plan_1000_keyboard
    )

# =====================
# 2000TK PLAN HANDLERS
# =====================

@dp.message(F.text.casefold() == "ЁЯТ╕рзирзжрзжрзжtk planЁЯТ╕")
async def plan_2000_menu(message: types.Message):
    await message.answer(
        "ЁЯТ╡ <b>рзирзжрзжрзж ржЯрж╛ржХрж╛ ржкрзНрж▓рзНржпрж╛ржи</b> ЁЯТ╡\n\n"
        "ржирж┐ржЪ ржерзЗржХрзЗ ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
        reply_markup=plan_2000_keyboard
    )

@dp.message(F.text.casefold() == "ЁЯдС рзирзжрзжрзж tk рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")
async def plan_2000_option_a(message: types.Message):
    await message.answer(
        "ЁЯдС <b>рзирзжрзжрзж ржЯрж╛ржХрж╛ рзн рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи</b> ЁЯдС\n\n"
        "ЁЯТ╕ Win rate рзпрзж% ЁЯТ╕\n"
        "тЬЕ рззржо рззрзжрз│ ржорж╛рж░ржмрзЗржи\n"
        "тЬЕ рззрзжрз│ рж╣рж╛рж░рж▓рзЗ рзирзжрз│ \n"
        "тЬЕ рзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзкрзжрз│\n"
        "тЬЕ рзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рзорзжрз│\n"
        "тЬЕ рзорзжрз│ рж╣рж╛рж░рж▓рзЗ рззрзмрзжрз│\n"
        "тЬЕ рззрзмрзжрз│ рж╣рж╛рж░рж▓рзЗ рзйрзирзжрз│\n"
        "тЬЕ рзйрзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзмрзкрзжрз│ \n"
        "ЁЯПЖрзмрзкрзжрз│ WinЁЯПЖ  (рзпрзж% chance)\n"
        "тЪая╕Прзмрзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рззржо рж╕рзНржЯрзЗржк ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗржитЪая╕П",
        reply_markup=plan_2000_keyboard
    )

@dp.message(F.text.casefold() == "ЁЯдС рзирзжрзжрзж tk рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи ЁЯдС")
async def plan_2000_option_b(message: types.Message):
    await message.answer(
        "ЁЯдС <b>рзирзжрзжрзж ржЯрж╛ржХрж╛ рзм рж╕рзНржЯрзЗржк ржкрзНржпрж╛ржи</b> ЁЯдС\n\n"
        "ЁЯТ╕ Win rate рзорзж% ЁЯТ╕\n"
        "тЬЕ рззржо рзирзжрз│ ржорж╛рж░ржмрзЗржи\n"
        "тЬЕ рзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзкрзжрз│ \n"
        "тЬЕ рзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рзорзжрз│\n"
        "тЬЕ рзорзжрз│ рж╣рж╛рж░рж▓рзЗ рззрзмрзжрз│\n"
        "тЬЕ рззрзмрзжрз│ рж╣рж╛рж░рж▓рзЗ рзйрзирзжрз│\n"
        "тЬЕ рзйрзирзжрз│ рж╣рж╛рж░рж▓рзЗ рзмрзкрзжрз│\n"
        "ЁЯПЖрзмрзкрзжрз│ WinЁЯПЖ  (рзорзж% chance)\n"
        "тЪая╕Прзмрзкрзжрз│ рж╣рж╛рж░рж▓рзЗ рззржо рж╕рзНржЯрзЗржк ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрзЗржитЪая╕П",
        reply_markup=plan_2000_keyboard
    )

# Start the bot
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
